package org.openecard.sc.pace.cvc

import org.openecard.sc.pace.cvc.CardVerifiableCertificate.Companion.toCardVerifiableCertificate
import org.openecard.sc.pace.cvc.CertificateDescription.Companion.toCertificateDescription
import org.openecard.sc.pace.cvc.CvcChain.Companion.toChain
import org.openecard.sc.pace.cvc.CvcDate.Companion.isBetween
import org.openecard.utils.common.hex
import kotlin.test.Test
import kotlin.test.assertContentEquals
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertIs
import kotlin.test.assertNull
import kotlin.test.assertTrue
import kotlin.time.ExperimentalTime
import kotlin.time.Instant

class CvcTest {
	@OptIn(ExperimentalUnsignedTypes::class)
	val certs =
		listOf(
			hex(
				
			),
			hex(
				"7F2181E77F4E81A05F290100420E44454356434165494430303130377F494F060A04007F00070202020203864104A6785B4A2E4A68DFDAF59BCAEC96DEA0A0A7D65EB6B1CBB5CEA44AA6B0D563BA0627EA3D6C16EB023B00292574D0ED95301CD8EA51CE27968D5AE9AA2D9730F25F2010444544566549444454523130313437327F4C12060904007F0007030102025305404713FF975F25060205000700095F24060205010000065F374035A4A4CFF415974B0F2C4CBB212E759D3A9D2DB3A3C7032B49E978B2CCA656783991E5090648C68926AF9403855D92AB616B024A27AA1A331E53AAEFB6845EEB",
			),
			hex(
				"7F218201B67F4E82016E5F290100420E44454356434165494430303130367F4982011D060A04007F000702020202038120A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E537782207D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9832026DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B68441048BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F0469978520A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7864104798F2B51459558D31976AD732AA57ECA873169A3EDC0B6B49D3795C104AF2CD41D89CD880D2B3DF68B8813B83E55BB0290B46CCB890D9460AE166483C2C5AE5A8701015F200E44454356434165494430303130377F4C12060904007F0007030102025305FC4F13FFFF5F25060203010102085F24060206010102075F3740A2B6A35EEFB93B0FBABBA0C52D88825EBAC8E83C236FFBFCAE4795A67063EA6C00E5D84365733DD91C80FC506B78519C798589CF716CCFA5F988C9C3DA149527",
			),
			hex(
				"7F218201B67F4E82016E5F290100420E44454356434165494430303130357F4982011D060A04007F000702020202038120A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E537782207D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9832026DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B68441048BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F0469978520A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A786410439524CBDF8CCE2C15CD6450C9DC0BBE65D5B5D01C391AE6EF63028040D233FA30502F26B5FAFCD21CE38E4CFD42A3115A8F11A49A98DBF43E0DB83F0520627A98701015F200E44454356434165494430303130367F4C12060904007F0007030102025305FC0F13FFFF5F25060201000300095F24060204000300095F3740A2D07CC9FEC2A10AE9F26D77C3CF06AA19F0CF641763373B960D64A4CCD431BC96AC630765CEDD09BCED8351A2AE9DD0F28EFFCB38111343E9D6B1B37D4ABDC9",
			),
			hex(
				"7F218201B67F4E82016E5F290100420E44454356434165494430303130347F4982011D060A04007F000702020202038120A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E537782207D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9832026DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B68441048BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F0469978520A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A786410459D1A08A2572022E17FED831982A9CB904518003CF83DABED88DBED28963768B88DBA22A153558BD21DDAA99318378B7CD7EBFE849557CD43F8526ABE72734538701015F200E44454356434165494430303130357F4C12060904007F0007030102025305FC0F13FFFF5F25060108000601025F24060201000601025F37402FBEEAE1B1ADE6CFB6CAB9D9B19F6A6EFACB7D9701997F43CF608BF72CF496F485F691E75190DEC25C672B92CF9BA917883659A6DC16793D22BBEC4019C616CC",
			),
			hex(
				
			),
			hex(
				"7F218201B67F4E82016E5F290100420E44454356434165494430303130327F4982011D060A04007F000702020202038120A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E537782207D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9832026DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B68441048BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F0469978520A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A78641048925419FC7F194922CFC6B8DD25AE6A19C1B59216E6CF06270E5D75CFD64205F55CF867BBFEFEEFD6E680E1FD197F18AB684484901362568EFC9ADB5C6018D728701015F200E44454356434165494430303130337F4C12060904007F0007030102025305FC0F13FFFF5F25060102010200035F24060105010200035F37404D6F08A86A4F18409F6685387DD3C6A7FF5D68EA4F7714A861BBB3BB721D05D3014ADF1763C9292F715D8E94EE9B3E1B73AB1382414EBF39DFB3B0FB6C09DBEB",
			),
		)

	@OptIn(ExperimentalUnsignedTypes::class)
	val certDesc =
		hex(
			
		)

	@OptIn(ExperimentalUnsignedTypes::class)
	val authenticatedAuxiliaryData = hex("67177315060904007F00070301040253083230323530373232")

	@OptIn(ExperimentalUnsignedTypes::class, ExperimentalTime::class)
	@Test
	fun `parse CVC`() {
		val cvcs = certs.map { it.toCardVerifiableCertificate() }
		cvcs[0].let { cvc ->
			assertEquals(0u, cvc.profileId)
			assertEquals("DEDVeIDDTR101472", cvc.certificateAuthorityReference.joinToString())
			assertEquals("0.4.0.127.0.7.2.2.2.2.3", cvc.publicKey.identifier.value)
			assertEquals("DE000067602698", cvc.certificateHolderReference.joinToString())

			assertEquals(2, cvc.extensions.dos.size)

			assertEquals(CvcDate(2025, 6, 22), cvc.validFrom)
			assertEquals(CvcDate(2025, 6, 23), cvc.validUntil)
			assertFalse { Instant.parse("2025-06-21T23:59:59Z").isBetween(cvc.validFrom, cvc.validUntil) }
			assertTrue { Instant.parse("2025-06-22T00:00:00Z").isBetween(cvc.validFrom, cvc.validUntil) }
			assertTrue { Instant.parse("2025-06-23T23:59:59Z").isBetween(cvc.validFrom, cvc.validUntil) }
			assertFalse { Instant.parse("2025-06-24T00:00:00Z").isBetween(cvc.validFrom, cvc.validUntil) }

			assertIs<AuthenticationTerminalChat>(cvc.chat).let { chat ->
				assertEquals(Chat.Role.AUTHENTICATION_TERMINAL, chat.role)
				assertContentEquals(hex("7F4C12060904007F0007030102025305000513FF07"), chat.asBytes)
				val chatCopy = chat.copy()
				val read = chatCopy.readAccess.toMap()
				val write = chatCopy.writeAccess.toMap()
				val special = chatCopy.specialFunctions.toMap()

				val readBitsUnset =
					setOf(
						ReadAccess.DG11,
						ReadAccess.DG12,
						ReadAccess.DG14,
						ReadAccess.DG15,
						ReadAccess.DG16,
						ReadAccess.DG18,
						ReadAccess.DG20,
						ReadAccess.DG21,
						ReadAccess.DG22,
					)
				read.forEach { assertEquals(!readBitsUnset.any { e -> it.key == e }, it.value, "${it.key}") }
				ReadAccess.entries.forEach { assertEquals(!readBitsUnset.any { e -> it == e }, chatCopy.readAccess[it], "$it") }

				write.forEach { assertEquals(false, it.value) }
				WriteAccess.entries.forEach { assertEquals(false, chatCopy.writeAccess[it]) }

				val specialBitsSet =
					setOf(
						SpecialFunction.RESTRICTED_IDENTIFICATION,
						SpecialFunction.COMMUNITY_ID_VERIFICATION,
						SpecialFunction.AGE_VERIFICATION,
					)
				special.forEach { assertEquals(specialBitsSet.any { e -> it.key == e }, it.value, "${it.key}") }
				SpecialFunction.entries.forEach {
					assertEquals(
						specialBitsSet.any { e ->
							it == e
						},
						chatCopy.specialFunctions[it],
						"$it",
					)
				}
				assertEquals(true, chatCopy.specialFunctions[SpecialFunction.RESTRICTED_IDENTIFICATION])
				assertEquals(
					special[SpecialFunction.RESTRICTED_IDENTIFICATION],
					chatCopy.specialFunctions[SpecialFunction.RESTRICTED_IDENTIFICATION],
				)
				// change one bit and see if the result is reflected in the data
				chatCopy.readAccess[ReadAccess.DG01] = false
				assertContentEquals(hex("7F4C12060904007F0007030102025305000513FE07"), chatCopy.asBytes)
			}
		}
	}

	@OptIn(ExperimentalUnsignedTypes::class)
	@Test
	fun `test chain building`() {
		val cvcs = certs.map { it.toCardVerifiableCertificate() }
		val chain = cvcs.toChain(PublicKeyReference("DE", "CVCAeID", "00102"))
		assertEquals(7, chain?.path?.size)
		assertEquals(
			"DE000067602698",
			chain
				?.terminalCertificate
				?.certificateHolderReference
				?.joinToString(),
		)
	}

	@OptIn(ExperimentalUnsignedTypes::class)
	@Test
	fun `parse Certificate Description`() {
		val cd = certDesc.toCertificateDescription()
		assertEquals("D-Trust GmbH", cd.issuerName)
		assertEquals("https://www.d-trust.net", cd.issuerUrl)
		assertEquals("ecsec GmbH", cd.subjectName)
		assertEquals("https://service.skidentity.de", cd.subjectUrl)
		assertNull(cd.redirectUrl)
		assertIs<TermsOfUse.PlainText>(cd.termsOfUse).let {
			assertTrue(it.text.startsWith("Name, Anschrift und E-Mail-Adresse des Diensteanbieters:\r\necsec GmbH"))
		}
		assertEquals(3, cd.commCertificates?.size)
		cd.commCertificates?.forEach { assertTrue { it.size == 32 } }
	}
}
